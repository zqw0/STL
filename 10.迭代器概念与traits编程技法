///以算法find为例，它接受两个迭代器和一个“搜寻目标”：
template<class InputIterator,class T>
InputIterator find(InputIterator first,
                   InputIterator last,
                   const T&value){
    while(first!=last&&*first!=value) ++first;
    return first;
}

///现在有了模仿对象，现在我们来为list链表设计一个迭代器，假设list及其节点结构如下

template<typename T>
class List{
public:
    void insert_front(T value);
    void insert_end(T value);
    void display(std::ostream &os=st::out) const;
    ///..
private:
    ListItem<T> *_end;
    ListItem<T> *_front;
    long _size;
};

template<typename T>
class ListItem{
public:
    T value() const{return _value;}
    ListItem* next()const{return _next;}///指针的行为决定如何遍历，为下面的operator++做铺垫
    ///...
private:
    T _value;
    ListItem *_next;///单向链表
};
/**
如何将这个list套用到先前所说的find呢，我们需要为它设计一个行为，类似指针外衣，也就是一个迭代器。当
我们提领为这一迭代器时，传回的应该是个listitem对象；当我们递增该迭代器时，它应该指向下一个ListItem
对象，为了让该迭代器适用于任何形态的节点，而步只限于ListItem,我们可以将它设计为一个class template：
**/
template <class Item>///item可以是单向链表节点或双向链表节点。
struct ListIter{     ///此处这个迭代器特定只为链表服务，因为
                     ///其独特的operator++之故
    Item* ptr;   ///保持与容器之间的一个联系

    ListIter(Item* p=0) ///default ctor
    :ptr(p){}
    ///不必实现copy ctor,因为编译器提供的缺省行为已足够
    ///不必实现operator=,因为编译器提供的缺省行为已足够

    Item& operator*()const{return *ptr;}
    Item* operator->()const{return ptr;}

    ///以下两个operator++遵循标准做法
    ListIter& operator++(){
        ptr=ptr->next();return *this;
    }

    ListIter operator++(int){
        ListIter tmp=*this;
        ++*this;
        return tmp;
    }

    bool operator==(const ListIter& i)const{
        return ptr==i.ptr;
    }

    bool operator!=(const ListIter& i)const{
        return ptr!=i.ptr;
    }
};
///现在我们可以将list和find由listiter粘合起来：
int main(){
    List<int> mylist;

    for(int i=0;i<5;++i){
        mylist.insert_front(i);
        mylist.inser_end(i+2);
    }
    mylist.display();   ///10(4 3 2 1 0 2 3 4 5 6)

    ListIter<ListItem<int>> begin(mylist.front());
    ListIter<ListItem<int>> end;
    ListIter<ListItem<int>> iter;
    iter=find(begin,end,3);

    if(iter==end) cout<<"not found"<<endl;
    else cout<<"found. "<<iter->value()<<endl;
    ///执行结果：found. 3

    iter=find(begin,end,7);
    if(iter==end) cout<<"not found"<<endl;
    else cout<<"found. "<<iter->value()<<endl;
    ///执行结果：not found
}
/**
注意，由于find()函数内以*iter!=value来检查元素值是否吻合，而本例之中value的型别是int,
iter的型别是listitem<int>，两者之间并无可使用的operator!=，所以必须另外写一个全局的operator!=重载函数，
并以int和listitem<int>作为它的两个参数型别：
**/
template<typename T>
bool operator!=(const ListItem<T>& item,T n){
    return item.value()!=n;
}

///以上版本暴露了很多实现细节，所以并不好
///类型获取。
template<class I,class T>
void func_impl(I iter,T t){
    T tmp;///这里推断出了类型。dectype应该也可以，有待尝试。
    ///...这里做了原本func()应该做的全部工作
};

template<class I>
inline
void func(I iter){
    func_impl(iter,*iter);///func的工作全部移往func_impl
}

int main(){
    int i;
    func(&i);
}
