/**
顾名思义，priority_queue是一个拥有权值观念的queue，它允许加入新元素，移除
旧元素，审视元素值等功能。由于这是一个queue，所以只允许在底端加入元素，并
从顶端取出元素，除此之外别无其他存取元素的途径。

priority_queue带有权值观念，其内元素并非依照被推入的次序排列，而是自动依照
元素的权值排列（通常权值以实值表示）。权值最高者，排在最前面。

缺省情况下priority_queue系利用一个max-heap完成，后者是一个以vector表现的
complete binary tree。max-heap可以满足priority_queue所需要的特性。

由于priority_queue完全以底部容器为根据，再加上heap处理规则，所以其实现非常
简单。缺省情况下是以vector为底部容器，源代码很简短，此处完整列出。

**/
template<class T,class Sequence=vector<T>,
         class Compare=less<typename Sequence::value_type>>
class priority_queue{
public:
    typedef typename Sequence::value_type value_type;
    typedef typename Sequence::size_type size_type;
    typedef typename Sequence::reference reference;
    typedef typename Sequence::const_reference const_reference;
protected:
    Sequence c;///底层容器
    Compare comp; ///元素大小比较标准
public:
    priority_queue():c(){}
    explicit priority_queue(const Compare& x):c(),comp(x){}

    ///以下用到make_heap(),push_heap(),pop_heap()都是泛型算法
    ///注意，任一个构造函数都立刻于底层容器内产生一个implicit representation
    ///heap.
    template<class InputIterator>
    priority_queue(InputIterator first,InputIterator last,const Compare& x)
    :c(first,last),comp(x){make_heap(c.begin(),c.end(),comp);}

    template<class InputIterator>
    priority_queue(InputIterator first,InputIterator last)
    :c(first,last){make_heap(c.begin(),c.end(),comp);}

    bool empty()const{return c.empty();}
    size_type size()const{return c.size();}
    const_reference top()const{return c.front();}
    void push(const value_type& x){
        __STL_TRY{
            c.push_back(x);
            push_heap(c.bgein(),c.end(),comp);
        }
        __STL_UNWIND(c.clear());
    }
    void pop(){
        __STL_TRY{
        pop_heap(c.begin(),c.end(),comp);
        c.pop_back();
        }
    }
    __STL_UNWIND(c.clear());
};
