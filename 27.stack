/**
以某种既有容器作为底部结构，将其接口改变，使之符合“先进后出”的特性，形成
一个stack，是很容易做到的。deque是双向开口的数据结构，若以deque为底部结构
并封闭其头端开口，便轻而易举的形成了一个stack。因此，sgi stl便以deque作为
缺省情况下的stack底部结构，stack的实现因而非常简单，源代码十分简短，本处
完整列出。

由于stack系以底部容器完成其所有工作，而具有这种修改某物接口，形成另一种风貌
之性质者，称为adapter（配接器），因此，STL stack 往往不被归类为container容器
，而被归类为container adapter.
**/

template<class T,class Sequence=deque<T>>
class stack{
    ///以下的 __STL_NULL_TMPL_ARGS会开展为<>
    friend bool operator==__STL_NULL_TMPL_ARGS(const stack&,const stack&);
    friend bool operator<__STL_NULL_TMPL_ARGS(const stack&,const stack&);
public:
    typedef typename Sequence::value_type value_type;
    typedef typename Sequence::size_type size_type;
    typedef typename Sequence::reference reference;
    typedef typename Sequence::const_reference const_reference;
protected:
    Sequence c; ///底层容器
public:
    ///以下完全利用Sequence c的操作，完成stack的操作
    bool empty()const {return c.empty();}
    size_type size()const {return c.size();}
    reference top(){return c.back();}
    const_reference top()const{return c.back();}
    ///deque是两头可进出，stack是末端进，末端出（所以后进者先出）。
    void push(const value_type& x){c.push_back(x);}
    void pop(){c.pop_back();}
};

template <class T,class Sequence>
bool operator==(const stack<T,Sequence>& x,const stack<t,Sequence>& y){
    return x.c==y.c;
}

template <class T,class Sequence>
bool operator<(const stack<T,Sequence>& x,const stack<t,Sequence>& y){
    return x.c<y.c;
}
