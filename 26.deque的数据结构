deque除了维护一个先前说过的指向map的指针外，也维护start,finish两个迭代器，分别
指向第一缓冲区的第一个元素和最后缓冲区的最后一个元素（的下一个位置）。此外，它
当然也必须记住目前的map大小。因为一旦map所提供的节点不足，就必须重新配置更大的
一块map

///见__deque_buf_size()。BufSize默认值为0的唯一理由是为了闪避某些
///编译器在处理常数算式（constant expressions）时的臭虫
///缺省使用alloc为配置器
template<class T,class Alloc=alloc,size_t BufSiz=0>
class deque{
public:
    typedef T value_type;
    typedef value_type* pointer;
    typedef size_t size_type;
public:             ///iterators
    typedef __deque_iterator<T,T&,T*,BufSize> iterator;
protected:
    typedef pointer* map_pointer;

protected:
    iterator start;    ///表现第一个节点
    iterator finish;   ///表现最后一个节点

    map_pointer map;   ///指向map,map是块连续空间
                       ///其每个元素都是个指针，指向一个节点（缓冲区）
    size_type map_size;///map内有多少指针
    ....
};
有了上述结构，以下数个机能便可轻易完成：
public:
    iterator begin(){return start;}
    iterator end() {return finish;}

    reference operator[](size_type n){
        return start[difference_type(n)];///调用__deque_iterator<>::operator[]
    }

    reference front(){return *start;}    ///调用__deque_iterator<>::operator*
    reference back(){
        iterator tmp=finish;
        --tmp;   ///调用__deque_iterator<>::operator--
        return *tmp; ///调用__deque_iterator<>::operator*
    }

    size_type size() const {return finish-start;}
    ///以上调用iterator::operator-
    size_type max_size() const {return size_type(-1);}
    bool empty()const {return finish==start;}
4.4.5deque的构造与内存管理ctor,push_back,push_front


deque自行定义了两个专属的空间配置器：
protected:
    ///专属之空间配置器，每次配置一个元素大小
    typedef simple_alloc<value_type,Alloc> data_allocator;
    ///专属之空间配置器，每次配置一个指针大小
    typedef simple_alloc<value_type,Alloc> map_allocator;

///并提供一个constructor如下：
deque(int n,const value_type& value)
:start(),finish(),map(0),map_size(0)
{
    fill_initialize(n,value);
}
///其内所调用的fill_initialize()负责产生并安排好deque的结构，并将
元素初值设定妥当：
template<class T,class Alloc,size_t BufSize>
void deque<T,Alloc,BufSize>::fill_initialize(size_type n,
                                             const value_type& value){
    create_map_and_nodes(n); ///把deque的结构都产生并安排好
    map_pointer cur;
    __STL_TRY{
        ///为每个节点的缓冲区设定初值
        for(cur=start.node;cur<finish.node;++cur)
            uninitialized_fill(*cur,*cur+buffer_size(),value);
        ///最后一个节点的设定稍有不同（因为尾端可能有备用空间，不必设定初值）
        uninitialized_fill(finish.first,finish.cur,value);
    }
    catch(...){
        ....
    }
}

///其中create_map_and_nodes()负责产生并安排好deque的结构：
template<class T,class Alloc,size_t BufSize>
void deque<T,Alloc,BufSize>::create_map_and_nodes(size_type num_elements){
    ///需要节点数=（元素个数/每个缓冲区可容纳的元素个数）+1
    ///如果刚好整除，会多配一个节点
    size_type num_nodes=num_elements/buffer_size()+1;

    ///一个Map要管理几个节点。最少8个，最多是“所需节点数+2”
    ///前后各预留一个，扩充时可用。
    map_size=max(initial_map_size(),num_nodes+2);
    map=map_allocator::allocate(map_size);
    ///以上配置出一个具有map_size个节点的map；

    ///以下令nstart和nfinish指向map所拥有之全部节点的最中央区段
    ///保持在最中央，可使头尾两端的扩充能量一样大。每个节点可对应一个缓冲区
    map_pointer nstart=map+(map_size-num_nodes)/2;
    map_pointer nfinish=nstart+num_nodes-1;

    map_pointer cur;
    __STL_TRY{
        ///为map内的每个现用节点配置缓冲区。所有缓冲区加起来就是deque的
        ///可用空间（最后一个缓冲区可能留有余裕）
        for(cur=nstart;cur<=nfinish;++cur)
            *cur=allocate_node();
    }
    catch(...){
    }
    ///为deque内的两个迭代器start和end设定正确内容
    start.set_node(nstart);
    finish.set_node(nfinish);
    start.cur=start.first;
    finish.cur=finish.first+num_elements%buffer_size();
    ///前面说过，如果刚好整除，会多配一个节点
    ///此时即令cur指向这多配的一个节点（所对应之缓冲区）的起始处
}
以下是push_back函数内容
public:
    void push_back(const value_type& t){
        if(finish.cur!=finish.last-1){
            ///最后缓冲区尚有两个以上的元素备用空间
            construct(finish.cur,t);///直接在备用空间上构造元素
            ++finish.cur;///调整最后缓冲区的使用状态
        }
        else{///最后一个缓冲区只剩下 一个元素备用空间
            push_back_aux(t);
        }
    }
template<class T,class Alloc,size_t BufSize>
void deque<T,Alloc,BufSize>::push_back_aux(const value_type& t){
    value_type t_copy=t;
    reserve_map_at_back();      ///若符合某种条件必须换一个map
    *(finish.node+1)=allocate_node(); ///配置一个新节点
    __STL_TRY{
        construct(finish.cur,t_copy);   ///针对标的元素设值
        finish.set_node(finish.node+1); ///改变finish，令其所指向新节点
        finish.cur=finish.first;        ///设定finish的状态
    }
}

void push_front(const value_type& t){
    if(start.cur!=start.first){///第一缓冲区尚有备用空间
        construct(start.cur-1,t);///直接在备用空间上构造元素
        --start.cur;          ///调整第一缓冲区的使用状态
    }
    else  ///第一缓冲区已无备用空间
    push_front_aux(t);
}

void deque<T,Alloc,BufSize>::push_front_aux(const value_type& t){
    value_type t_copy=t;
    reserve_map_at_back();      ///若符合某种条件必须换一个map
    *(start.node-1)=allocate_node(); ///配置一个新节点
    __STL_TRY{
        construct(start.node,t_copy);   ///针对标的元素设值
        start.set_node(start.node-1); ///改变finish，令其所指向新节点
        start.cur=start.last-1;        ///设定finish的状态
    }
}

void reserve_map_at_back(size_type nodes_to_add=1){
    if(nodes_to_add+1>map_size-(finish.node-map)){
        ///如果map尾端的节点备用空间不足
        ///符合以上条件则必须重换一个map（配置更大的，拷贝原来的，释放原来的）
        reallocate_map(nodes_to_add,flase);
    }
    void reserve_map_front(size_type nodes_to_add=1){
        if(node_to_add>start.node-map){
            ///如果map前端的节点备用空间不足。
            ///符合以上条件则必须重换一个map（配置更大的，拷贝原来的，释放原来的）
            reallocate_map(nodes_to_add,true);
        }
    }
}

template<class T,class Alloc,class BufSize>
void deque<T,Alloc,BufSize>::reallocate_map(size_type nodes_to_add,
                                            bool add_at_front){
    size_type old_num_nodes=finish.node-start.node+1;
    size_type new_num_nodes=old_num_nodes+nodes_to_add;

    map_pointer new_nstart;
    if(map_size>2*new_num_nodes){
        new_nstart=map+(map_size-new_num_nodes)/2
                    +(add_at_front?nodes_to_add:0);
        if(new_snstart<start.node)
            copy(start.node,finish.node+1,new_nstart);
        else
            copy_backward(start.node,finish.node+1,new_nstart+old_num_nodes);
    }
    else{
        size_type new_map_size=map_size+max(map_size,nodes_to_add)+2;
        ///配置一块空间，准备给新map使用
        map_pointer new_map=map_allocator::allocate(new_map_size);
        new_nstart=new_map+(new_map_size-new_num_nodes)/2
                            +(add_at_front?nodes_to_add:0);
        ///把原map内容拷贝过来
        copy(start.node,finish.node+1,new_nstart);
        ///释放原map
        map_allocator::deallocate(map,map_size);
        ///设定新map的起始地址与大小
        map=new_map;
        map_size=new_map_size;
    }

    ///重新设定迭代器start和finish
    start.set_node(new_nastart);
    finish.set_node(new_nstart+old_num_nodes-1);
}
