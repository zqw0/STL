 2.3迭代器相应型别之四：pointer-type
/**
pointer和reference 在C++中有非常密切的关联。如果“传回一个左值”，令它代表P所指之物是可能的，
那么传回一个左值令它代表P所指之物的地址也一定可以。也就是说，我们能够传回一个Pointer，指向
迭代器所指之物
**/
Item& operator*()const{return *ptr;}
Item* operator->()const{return ptr;}

Item& 便是ListIter的reference type，而Item* 便是pointer type；
现在我们把reference type和pointer type这两个相应型别加入traits内：
template<class I>
struct iterator_traits{
    typedef typename I::pointer  pointer;
    typedef typename I::reference reference;
};

///针对原生指针而设计的“偏特化版”
template<class T>
struct iterator_traits<T*>{
    typedef  T*  pointer;
    typedef  T&  reference;
};
///针对原生指针pointer-to-const而设计的“偏特化版”
template<class T>
struct iterator_traits<const T*>{
    typedef const T*  pointer;
    typedef const T&  reference;
};
