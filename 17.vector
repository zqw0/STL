/**
vector概述：
vector的数据安排以及操作方式，与array非常相似。两者的唯一差别在于空间运用的灵活性。
array是静态空间，一旦配置了就不能改变；要换个大（或小）一点的房子，可以，一切琐细得
由客户端自己来：首先配置一块新空间，然后将元素从旧址一一搬往新址，再把原来的空间释
还给系统。vector是动态空间，随着元素的加入，它的内部机制会自行扩容空间以容纳新元素。
因此，vector的运用对于内存的合理利用与运用的灵活性有很大的帮助，我们再也不必因为害怕
空间不足而一开始就要求一个大块头array了，我们可以安心使用vector，吃多少用多少。

vector的实现技术，关键在于其对大小的控制以及重新配置时的数据移动效率。一旦vector旧有
空间满载，如果客户端每新增一个元素，vector内部只是扩充一个元素空间，实为不智，因为所
谓扩充空间（不论多大），一如稍早所说，是“配置新空间/数据移动/释还旧空间”的大工程时间
成本很高，应该加入某种未雨绸缪的考虑。
