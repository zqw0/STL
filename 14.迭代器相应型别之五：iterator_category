/**
根据移动特性与施行操作，迭代器被分为5类：
input iterator;这种迭代器所指的对象，不允许外界改变。只读
output iterator:唯写 write only
forward iterator:允许写入形算法，例如replace 在此种迭代器所形成的区间上
进行读写操作。
bidirectional iterator:可双向移动。某些算法需要逆向走访某个迭代器区间（例如逆向拷贝
某范围内的元素），可以使用birdirectional iterators。
random access iterator:前四种迭代器都只供应一部分指针算术能力（前三种支持operator++,第四种
支持operator--）,第五种则涵盖所有指针算术能力，包括p+n,p-n,p[n],p1<p2,p1>p2.
**/
萃取迭代器类型
如advance(迭代器，n步)。功能让迭代器向前走n步
但是考虑到效率问题，有的迭代器可以+n这种操作，而有的
迭代器只能用while(n--) 迭代器++这种方法。所以怎么区别
迭代器，来使用重载功能呢。我们的想法就要将迭代器的类型萃取
出来。萃取方法和上面的方法类似
template<class I>
struct iterator_traits{
    typedef typename I::iterator_category iterator_category;
};

///针对原生指针而设计的偏特化版
template<class T>
struct iterator_traits<T*>{
    ///注意原生指针是一种random access iterator
    typedef random_access_iterator_tag iterator_category;
};

///针对原生pointer-to-const而设计的偏特化版
template<class T>
struct iterator_traits<const T*>{
    ///注意原生指针是一种random access iterator
    typedef random_access_iterator_tag iterator_category;
};

                        2.5iterator源代码完整重列
///五种迭代器类型
struct input_iterator_tag{};
struct output_iterator_tag{};
struct forward_iterator_tag:public input_iterator_tag{};
struct bidirectional_iterator_tag:public forward_iterator_tag{};
struct random_access_iterator_tag:public bidirectional_iterator_tag{};

///为避免写代码时挂一漏万，自行开发的迭代器最好继承自下面这个std::iterator

template<class Category,class T,class distance=ptrdiff_t,class Pointer=T*,
class Reference =T&>
struct iterator{
    typedef Category iterator_category;
    typedef T        value_type;
    typedef Distance difference_type;
    typedef Pointer pointer;
    typedef Reference reference;
};

///"榨汁机"traits
template<class Iterator>
struct iterator_traits{
    typedef typename Iterator::iterator_category iter_category;
    typedef typename Iterator::value_type value_type;
    typedef typename Iterator::difference_type difference_type;
    typedef typename Iterator::pointer pointer;
    typedef typename Iterator::reference reference;
};

///针对原生指针（native pointer）而设计的traits 偏特化版本
template<class T>
struct iterator_traits<T*>{
    typedef random_access_iterator_tag iterator_category;
    typedef T value_type;
    typedef ptrdiff_t difference_type;
    typedef T* pointer;
    typedef T& reference;
};
///针对原生之pointer-to-const 而设计的traits偏特化版
template<class T>
struct iterator_traits<const T*>{
    typedef random_access_iterator_tag iterator_category;
    typedef T value_type;
    typedef ptrdiff_t difference_type;
    typedef T* pointer;
    typedef T& reference;
};

///这个函数可以很方便的决定某个迭代器的类型（category）
template<class Iterator>
inline typename iterator_traits<Iterator>::iterator_category
iterator_category(const Iterator&){
    typedef typename iterator_traits<Iterator>::iterator_category category;
    return category();
}

///这个函数可以很方便地决定某个迭代器的distance type
template<class Iterator>
inline typename iterator_traits<Iterator>::difference_type*
distance_type(const Iterator&){
      return static_cast<typename iterator_traits<Iterator>::difference_type*>(0);
}

///这个函数可以很方便地决定某个迭代器的distance type
template<class Iterator>
inline typename iterator_traits<Iterator>::value_type*
value_type(const Iterator&){
      return static_cast<typename iterator_traits<Iterator>::value_type*>(0);
}

///以下是整组distance 函数
template<class InputIterator>
inline iterator_traits<InputIterator>::difference_type
__distance(InputIterator first,InputIterator last,input_iterator_tag){
    iterator_traits<InputIterator>::difference_type n=0;
    while(first!=last){
        ++first;++n;
    }
    return n;
}

template<class RandomAccessIterator>
inline iterator_traits<RandomAccessIterator>::difference_type
__distance(RandomAccessIterator first,RandomAccessIterator last,random_access_iterator_tag){
    return last-first;
}

template<class InputIterator>
inline iterator_traits<InputIterator>::difference_type
distance(InputIterator first,InputIterator last){
    typedef typename
    iterator_traits<InputIterator>::iterator_category category;
    return __distance(first,last,category());
}

///以下是整组advance函数
template<class InputIterator,class Distance>
inline void __advance(InputIterator &i,Distance n,bidirectional_iterator_tag){
    while(n--) ++i;
}

template<class BidirectionalIterator,class Distance>
inline void __advance(BidirectionalIterator &i,Distance n,bidirectional_iterator_tag){
    if(n>=0) while(n--) ++i;
    else while(n++) --i;
}

template<class RandomAccessIterator,class Distance>
inline void __advance(RandomAccessIterator &i,Distance n,random_access_iterator_tag){
    i+=n;
}

template<class InputIterator,class Distance>
inline void advance(InputIterator &i,Distance n){
    __advance(i,n,iterator_category(i));
}
